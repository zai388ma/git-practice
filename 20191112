### 项目学习笔记
- Vue.js内置的component标签，它的用途就是可以动态绑定我们的组件，根据数据的不同更换不同的组件。
- 组件的style标签的scoped属性意思是该样式只对当前组件有效
- 什么是深度搜索优化？（SEO）
- SPA是单页面富应用，只有一个html.
- JavaScript通过hashChange来监听url的改变。IE7以下需要用轮询。
- node-sass提供了一个nodejs到libsass的桥梁.libsass是广受欢迎的css预处理器sass的c版本.
  
  这个东东提供了难以想象的效率来本地编译sass到css文件，甚至可以通过中间件的方式自动编译
- [前端dockerfile文件的作用](https://segmentfault.com/a/1190000017011544)
- js中数组的splice方法是可以对数组添加或删除元素，三个参数分别是：要添加位置的索引，要从索引开始删除的位数，要添加的数组元素。
- js的slice方法：从某个已有的数组返回选定的元素。该方法不会修改数组，只会返回一个新的数组。
- js的pop方法：向数组的末尾添加一个或更多元素，返回值是新数组的长度。
- js的join方法：把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。
参数有两个分别是开始的index和end的index。end没有的话就默认从start到数组结束。
- js的reverse方法：将数组变成倒序。
- js的sort()：对数组的元素进行排序。没有参数时默认将数组按照字母顺序进行排序。
如果数组元素是数字，想要进行数值大小排序，用排序函数sortNumber();
- 调用带有返回值的函数时，没有规定要求一定要去用变量接收返回数据。有返回值的不一定要去接收，可以不用以接收，当作普通方法来调用。
- shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。
- toSource() 方法表示对象的源代码。
- toString() 方法可把数组转换为字符串，并返回结果。
- 什么是跨域请求？和option请求有什么关系？
- 模块化其实可以防止变量名冲突，只要一个模块内的变量名不冲突就可以了。
- 使用”立即执行函数”（Immediately-Invoked Function Expression，IIFE），可以达到不暴露私有成员的目的。
var module = (function() {
var _count = 0;
var m1 = function() {
alert(_count)
}
var m2 = function() {
alert(_count + 1)
}
 
return {
m1: m1,
m2: m2
}
})()

使用上面的写法，外部代码无法读取内部的_count变量。

- node编程中最重要的思想之一就是模块，而正是这个思想，让JavaScript的大规模工程成为可能。模块化编程在js界流行，也是基于此，随后在浏览器端，requirejs和seajs之类的工具包也出现了，可以说在对应规范下，require统治了ES6之前的所有模块化编程，即使现在，在ES6 module被完全实现之前，还是这样
- 在CommonJS中，有一个全局性方法require()，用于加载模块。
- 有了服务器端模块以后，很自然地，大家就想要客户端模块。而且最好两者能够兼容，一个模块不用修改，在服务器和浏览器都可以运行。
  
  但是，由于一个重大的局限，使得CommonJS规范不适用于浏览器环境。还是上一节的代码，如果在浏览器中运行，会有一个很大的问题
  
  即var math = require('math');
   math.add(2, 3);
   第二行math.add(2, 3)，在第一行require(‘math’)之后运行，因此必须等math.js加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等
   
   这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。
   因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是AMD规范诞生的背景。
- [闭包的使用场景](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures) 
- [npm Script使用指南](http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html)
- npm ERR! Cannot read property 'match' of undefined 错误处理,删掉package-lock.json，再运行npm install便可正常的安装了。
- [给前端插上docker的翅膀](https://segmentfault.com/a/1190000017011544)
- [彻底搞清楚javaScript中的require、import、export](https://www.cnblogs.com/libin-1/p/7127481.html)
- 文档对象模型Document引用的querySelector()方法返回文档中与指定选择器或选择器组匹配的第一个 html元素Element。 如果找不到匹配项，则返回null。
- 框架和库的最大区别在于“控制反转”，当你使用一个库，你会调用库中的代码，而当你使用一个框架，框架会调用你的代码。框架和库是一个有交叉的概念，很多框架都是以库的形式发布的，例如Java的Spring MVC框架，其发布的jar包本身就是一个库。而一个库如果也能通过依赖反转的方式进行扩展，那也可以视为一个框架，例如Python的markdown解析库Python Markdown，可以添加自定义的解析扩展，那么可以被视为一个markdonw解析框架。
- 控件是GUI编程的一个概念，一般来说用户可以看到的、可交互的组件，被称为一个控件。例如.NET编程中的System.Windows.Controls.Button是一个控件。
- 所谓钩子，就是在框架工具的特定阶段，插一刀导入特定的操作。
- mixins就相当于java中的继承。可以让两个或多个组件公用一套data和method。只需要在要使用的组件中添加mixins:

  


